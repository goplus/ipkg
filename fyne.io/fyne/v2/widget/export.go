// export by github.com/goplus/igop/cmd/qexp

package widget

import (
	q "fyne.io/fyne/v2/widget"

	"go/constant"
	"reflect"

	"github.com/goplus/igop"
)

func init() {
	igop.RegisterPackage(&igop.Package{
		Name: "widget",
		Path: "fyne.io/fyne/v2/widget",
		Deps: map[string]string{
			"errors":                            "errors",
			"fmt":                               "fmt",
			"fyne.io/fyne/v2":                   "fyne",
			"fyne.io/fyne/v2/canvas":            "canvas",
			"fyne.io/fyne/v2/data/binding":      "binding",
			"fyne.io/fyne/v2/driver/desktop":    "desktop",
			"fyne.io/fyne/v2/driver/mobile":     "mobile",
			"fyne.io/fyne/v2/internal":          "internal",
			"fyne.io/fyne/v2/internal/cache":    "cache",
			"fyne.io/fyne/v2/internal/color":    "color",
			"fyne.io/fyne/v2/internal/painter":  "painter",
			"fyne.io/fyne/v2/internal/widget":   "widget",
			"fyne.io/fyne/v2/layout":            "layout",
			"fyne.io/fyne/v2/storage":           "storage",
			"fyne.io/fyne/v2/theme":             "theme",
			"github.com/yuin/goldmark":          "goldmark",
			"github.com/yuin/goldmark/ast":      "ast",
			"github.com/yuin/goldmark/renderer": "renderer",
			"image/color":                       "color",
			"io":                                "io",
			"math":                              "math",
			"net/url":                           "url",
			"reflect":                           "reflect",
			"strconv":                           "strconv",
			"strings":                           "strings",
			"sync":                              "sync",
			"sync/atomic":                       "atomic",
			"time":                              "time",
			"unicode":                           "unicode",
		},
		Interfaces: map[string]reflect.Type{
			"RichTextBlock":   reflect.TypeOf((*q.RichTextBlock)(nil)).Elem(),
			"RichTextSegment": reflect.TypeOf((*q.RichTextSegment)(nil)).Elem(),
			"TextGridStyle":   reflect.TypeOf((*q.TextGridStyle)(nil)).Elem(),
			"ToolbarItem":     reflect.TypeOf((*q.ToolbarItem)(nil)).Elem(),
		},
		NamedTypes: map[string]reflect.Type{
			"Accordion":           reflect.TypeOf((*q.Accordion)(nil)).Elem(),
			"AccordionItem":       reflect.TypeOf((*q.AccordionItem)(nil)).Elem(),
			"BaseWidget":          reflect.TypeOf((*q.BaseWidget)(nil)).Elem(),
			"Button":              reflect.TypeOf((*q.Button)(nil)).Elem(),
			"ButtonAlign":         reflect.TypeOf((*q.ButtonAlign)(nil)).Elem(),
			"ButtonIconPlacement": reflect.TypeOf((*q.ButtonIconPlacement)(nil)).Elem(),
			"ButtonImportance":    reflect.TypeOf((*q.ButtonImportance)(nil)).Elem(),
			"ButtonStyle":         reflect.TypeOf((*q.ButtonStyle)(nil)).Elem(),
			"Card":                reflect.TypeOf((*q.Card)(nil)).Elem(),
			"Check":               reflect.TypeOf((*q.Check)(nil)).Elem(),
			"CheckGroup":          reflect.TypeOf((*q.CheckGroup)(nil)).Elem(),
			"CustomTextGridStyle": reflect.TypeOf((*q.CustomTextGridStyle)(nil)).Elem(),
			"DisableableWidget":   reflect.TypeOf((*q.DisableableWidget)(nil)).Elem(),
			"Entry":               reflect.TypeOf((*q.Entry)(nil)).Elem(),
			"FileIcon":            reflect.TypeOf((*q.FileIcon)(nil)).Elem(),
			"Form":                reflect.TypeOf((*q.Form)(nil)).Elem(),
			"FormItem":            reflect.TypeOf((*q.FormItem)(nil)).Elem(),
			"Hyperlink":           reflect.TypeOf((*q.Hyperlink)(nil)).Elem(),
			"HyperlinkSegment":    reflect.TypeOf((*q.HyperlinkSegment)(nil)).Elem(),
			"Icon":                reflect.TypeOf((*q.Icon)(nil)).Elem(),
			"ImageSegment":        reflect.TypeOf((*q.ImageSegment)(nil)).Elem(),
			"Label":               reflect.TypeOf((*q.Label)(nil)).Elem(),
			"List":                reflect.TypeOf((*q.List)(nil)).Elem(),
			"ListSegment":         reflect.TypeOf((*q.ListSegment)(nil)).Elem(),
			"Menu":                reflect.TypeOf((*q.Menu)(nil)).Elem(),
			"Orientation":         reflect.TypeOf((*q.Orientation)(nil)).Elem(),
			"ParagraphSegment":    reflect.TypeOf((*q.ParagraphSegment)(nil)).Elem(),
			"PopUp":               reflect.TypeOf((*q.PopUp)(nil)).Elem(),
			"PopUpMenu":           reflect.TypeOf((*q.PopUpMenu)(nil)).Elem(),
			"ProgressBar":         reflect.TypeOf((*q.ProgressBar)(nil)).Elem(),
			"ProgressBarInfinite": reflect.TypeOf((*q.ProgressBarInfinite)(nil)).Elem(),
			"RadioGroup":          reflect.TypeOf((*q.RadioGroup)(nil)).Elem(),
			"RichText":            reflect.TypeOf((*q.RichText)(nil)).Elem(),
			"RichTextStyle":       reflect.TypeOf((*q.RichTextStyle)(nil)).Elem(),
			"Select":              reflect.TypeOf((*q.Select)(nil)).Elem(),
			"SelectEntry":         reflect.TypeOf((*q.SelectEntry)(nil)).Elem(),
			"Separator":           reflect.TypeOf((*q.Separator)(nil)).Elem(),
			"SeparatorSegment":    reflect.TypeOf((*q.SeparatorSegment)(nil)).Elem(),
			"Slider":              reflect.TypeOf((*q.Slider)(nil)).Elem(),
			"Table":               reflect.TypeOf((*q.Table)(nil)).Elem(),
			"TableCellID":         reflect.TypeOf((*q.TableCellID)(nil)).Elem(),
			"TextGrid":            reflect.TypeOf((*q.TextGrid)(nil)).Elem(),
			"TextGridCell":        reflect.TypeOf((*q.TextGridCell)(nil)).Elem(),
			"TextGridRow":         reflect.TypeOf((*q.TextGridRow)(nil)).Elem(),
			"TextSegment":         reflect.TypeOf((*q.TextSegment)(nil)).Elem(),
			"Toolbar":             reflect.TypeOf((*q.Toolbar)(nil)).Elem(),
			"ToolbarAction":       reflect.TypeOf((*q.ToolbarAction)(nil)).Elem(),
			"ToolbarSeparator":    reflect.TypeOf((*q.ToolbarSeparator)(nil)).Elem(),
			"ToolbarSpacer":       reflect.TypeOf((*q.ToolbarSpacer)(nil)).Elem(),
			"Tree":                reflect.TypeOf((*q.Tree)(nil)).Elem(),
		},
		AliasTypes: map[string]reflect.Type{
			"ListItemID": reflect.TypeOf((*int)(nil)).Elem(),
			"TreeNodeID": reflect.TypeOf((*string)(nil)).Elem(),
		},
		Vars: map[string]reflect.Value{
			"RichTextStyleBlockquote": reflect.ValueOf(&q.RichTextStyleBlockquote),
			"RichTextStyleCodeBlock":  reflect.ValueOf(&q.RichTextStyleCodeBlock),
			"RichTextStyleCodeInline": reflect.ValueOf(&q.RichTextStyleCodeInline),
			"RichTextStyleEmphasis":   reflect.ValueOf(&q.RichTextStyleEmphasis),
			"RichTextStyleHeading":    reflect.ValueOf(&q.RichTextStyleHeading),
			"RichTextStyleInline":     reflect.ValueOf(&q.RichTextStyleInline),
			"RichTextStyleParagraph":  reflect.ValueOf(&q.RichTextStyleParagraph),
			"RichTextStylePassword":   reflect.ValueOf(&q.RichTextStylePassword),
			"RichTextStyleStrong":     reflect.ValueOf(&q.RichTextStyleStrong),
			"RichTextStyleSubHeading": reflect.ValueOf(&q.RichTextStyleSubHeading),
			"TextGridStyleDefault":    reflect.ValueOf(&q.TextGridStyleDefault),
			"TextGridStyleWhitespace": reflect.ValueOf(&q.TextGridStyleWhitespace),
		},
		Funcs: map[string]reflect.Value{
			"NewAccordion":            reflect.ValueOf(q.NewAccordion),
			"NewAccordionItem":        reflect.ValueOf(q.NewAccordionItem),
			"NewButton":               reflect.ValueOf(q.NewButton),
			"NewButtonWithIcon":       reflect.ValueOf(q.NewButtonWithIcon),
			"NewCard":                 reflect.ValueOf(q.NewCard),
			"NewCheck":                reflect.ValueOf(q.NewCheck),
			"NewCheckGroup":           reflect.ValueOf(q.NewCheckGroup),
			"NewCheckWithData":        reflect.ValueOf(q.NewCheckWithData),
			"NewEntry":                reflect.ValueOf(q.NewEntry),
			"NewEntryWithData":        reflect.ValueOf(q.NewEntryWithData),
			"NewFileIcon":             reflect.ValueOf(q.NewFileIcon),
			"NewForm":                 reflect.ValueOf(q.NewForm),
			"NewFormItem":             reflect.ValueOf(q.NewFormItem),
			"NewHyperlink":            reflect.ValueOf(q.NewHyperlink),
			"NewHyperlinkWithStyle":   reflect.ValueOf(q.NewHyperlinkWithStyle),
			"NewIcon":                 reflect.ValueOf(q.NewIcon),
			"NewLabel":                reflect.ValueOf(q.NewLabel),
			"NewLabelWithData":        reflect.ValueOf(q.NewLabelWithData),
			"NewLabelWithStyle":       reflect.ValueOf(q.NewLabelWithStyle),
			"NewList":                 reflect.ValueOf(q.NewList),
			"NewListWithData":         reflect.ValueOf(q.NewListWithData),
			"NewMenu":                 reflect.ValueOf(q.NewMenu),
			"NewModalPopUp":           reflect.ValueOf(q.NewModalPopUp),
			"NewMultiLineEntry":       reflect.ValueOf(q.NewMultiLineEntry),
			"NewPasswordEntry":        reflect.ValueOf(q.NewPasswordEntry),
			"NewPopUp":                reflect.ValueOf(q.NewPopUp),
			"NewPopUpMenu":            reflect.ValueOf(q.NewPopUpMenu),
			"NewProgressBar":          reflect.ValueOf(q.NewProgressBar),
			"NewProgressBarInfinite":  reflect.ValueOf(q.NewProgressBarInfinite),
			"NewProgressBarWithData":  reflect.ValueOf(q.NewProgressBarWithData),
			"NewRadioGroup":           reflect.ValueOf(q.NewRadioGroup),
			"NewRichText":             reflect.ValueOf(q.NewRichText),
			"NewRichTextFromMarkdown": reflect.ValueOf(q.NewRichTextFromMarkdown),
			"NewRichTextWithText":     reflect.ValueOf(q.NewRichTextWithText),
			"NewSelect":               reflect.ValueOf(q.NewSelect),
			"NewSelectEntry":          reflect.ValueOf(q.NewSelectEntry),
			"NewSeparator":            reflect.ValueOf(q.NewSeparator),
			"NewSimpleRenderer":       reflect.ValueOf(q.NewSimpleRenderer),
			"NewSlider":               reflect.ValueOf(q.NewSlider),
			"NewSliderWithData":       reflect.ValueOf(q.NewSliderWithData),
			"NewTable":                reflect.ValueOf(q.NewTable),
			"NewTextGrid":             reflect.ValueOf(q.NewTextGrid),
			"NewTextGridFromString":   reflect.ValueOf(q.NewTextGridFromString),
			"NewToolbar":              reflect.ValueOf(q.NewToolbar),
			"NewToolbarAction":        reflect.ValueOf(q.NewToolbarAction),
			"NewToolbarSeparator":     reflect.ValueOf(q.NewToolbarSeparator),
			"NewToolbarSpacer":        reflect.ValueOf(q.NewToolbarSpacer),
			"NewTree":                 reflect.ValueOf(q.NewTree),
			"NewTreeWithStrings":      reflect.ValueOf(q.NewTreeWithStrings),
			"ShowModalPopUp":          reflect.ValueOf(q.ShowModalPopUp),
			"ShowPopUp":               reflect.ValueOf(q.ShowPopUp),
			"ShowPopUpAtPosition":     reflect.ValueOf(q.ShowPopUpAtPosition),
			"ShowPopUpMenuAtPosition": reflect.ValueOf(q.ShowPopUpMenuAtPosition),
		},
		TypedConsts: map[string]igop.TypedConst{
			"ButtonAlignCenter":      {reflect.TypeOf(q.ButtonAlignCenter), constant.MakeInt64(int64(q.ButtonAlignCenter))},
			"ButtonAlignLeading":     {reflect.TypeOf(q.ButtonAlignLeading), constant.MakeInt64(int64(q.ButtonAlignLeading))},
			"ButtonAlignTrailing":    {reflect.TypeOf(q.ButtonAlignTrailing), constant.MakeInt64(int64(q.ButtonAlignTrailing))},
			"ButtonIconLeadingText":  {reflect.TypeOf(q.ButtonIconLeadingText), constant.MakeInt64(int64(q.ButtonIconLeadingText))},
			"ButtonIconTrailingText": {reflect.TypeOf(q.ButtonIconTrailingText), constant.MakeInt64(int64(q.ButtonIconTrailingText))},
			"DangerImportance":       {reflect.TypeOf(q.DangerImportance), constant.MakeInt64(int64(q.DangerImportance))},
			"HighImportance":         {reflect.TypeOf(q.HighImportance), constant.MakeInt64(int64(q.HighImportance))},
			"Horizontal":             {reflect.TypeOf(q.Horizontal), constant.MakeInt64(int64(q.Horizontal))},
			"LowImportance":          {reflect.TypeOf(q.LowImportance), constant.MakeInt64(int64(q.LowImportance))},
			"MediumImportance":       {reflect.TypeOf(q.MediumImportance), constant.MakeInt64(int64(q.MediumImportance))},
			"Vertical":               {reflect.TypeOf(q.Vertical), constant.MakeInt64(int64(q.Vertical))},
			"WarningImportance":      {reflect.TypeOf(q.WarningImportance), constant.MakeInt64(int64(q.WarningImportance))},
		},
		UntypedConsts: map[string]igop.UntypedConst{},
	})
}
