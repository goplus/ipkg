// export by github.com/goplus/igop/cmd/qexp

package fyne

import (
	q "fyne.io/fyne/v2"

	"go/constant"
	"reflect"

	"github.com/goplus/igop"
)

func init() {
	igop.RegisterPackage(&igop.Package{
		Name: "fyne",
		Path: "fyne.io/fyne/v2",
		Deps: map[string]string{
			"fmt":           "fmt",
			"image":         "image",
			"image/color":   "color",
			"io":            "io",
			"io/ioutil":     "ioutil",
			"log":           "log",
			"net/http":      "http",
			"net/url":       "url",
			"path/filepath": "filepath",
			"runtime":       "runtime",
			"strings":       "strings",
			"sync":          "sync",
			"sync/atomic":   "atomic",
			"time":          "time",
		},
		Interfaces: map[string]reflect.Type{
			"App":                      reflect.TypeOf((*q.App)(nil)).Elem(),
			"Canvas":                   reflect.TypeOf((*q.Canvas)(nil)).Elem(),
			"CanvasObject":             reflect.TypeOf((*q.CanvasObject)(nil)).Elem(),
			"Clipboard":                reflect.TypeOf((*q.Clipboard)(nil)).Elem(),
			"CloudProvider":            reflect.TypeOf((*q.CloudProvider)(nil)).Elem(),
			"CloudProviderPreferences": reflect.TypeOf((*q.CloudProviderPreferences)(nil)).Elem(),
			"CloudProviderStorage":     reflect.TypeOf((*q.CloudProviderStorage)(nil)).Elem(),
			"Device":                   reflect.TypeOf((*q.Device)(nil)).Elem(),
			"Disableable":              reflect.TypeOf((*q.Disableable)(nil)).Elem(),
			"DoubleTappable":           reflect.TypeOf((*q.DoubleTappable)(nil)).Elem(),
			"Draggable":                reflect.TypeOf((*q.Draggable)(nil)).Elem(),
			"Driver":                   reflect.TypeOf((*q.Driver)(nil)).Elem(),
			"Focusable":                reflect.TypeOf((*q.Focusable)(nil)).Elem(),
			"KeyboardShortcut":         reflect.TypeOf((*q.KeyboardShortcut)(nil)).Elem(),
			"Layout":                   reflect.TypeOf((*q.Layout)(nil)).Elem(),
			"LegacyTheme":              reflect.TypeOf((*q.LegacyTheme)(nil)).Elem(),
			"Lifecycle":                reflect.TypeOf((*q.Lifecycle)(nil)).Elem(),
			"ListableURI":              reflect.TypeOf((*q.ListableURI)(nil)).Elem(),
			"OverlayStack":             reflect.TypeOf((*q.OverlayStack)(nil)).Elem(),
			"Preferences":              reflect.TypeOf((*q.Preferences)(nil)).Elem(),
			"Resource":                 reflect.TypeOf((*q.Resource)(nil)).Elem(),
			"Scrollable":               reflect.TypeOf((*q.Scrollable)(nil)).Elem(),
			"SecondaryTappable":        reflect.TypeOf((*q.SecondaryTappable)(nil)).Elem(),
			"Settings":                 reflect.TypeOf((*q.Settings)(nil)).Elem(),
			"Shortcut":                 reflect.TypeOf((*q.Shortcut)(nil)).Elem(),
			"Shortcutable":             reflect.TypeOf((*q.Shortcutable)(nil)).Elem(),
			"Storage":                  reflect.TypeOf((*q.Storage)(nil)).Elem(),
			"Tabbable":                 reflect.TypeOf((*q.Tabbable)(nil)).Elem(),
			"Tappable":                 reflect.TypeOf((*q.Tappable)(nil)).Elem(),
			"Theme":                    reflect.TypeOf((*q.Theme)(nil)).Elem(),
			"URI":                      reflect.TypeOf((*q.URI)(nil)).Elem(),
			"URIReadCloser":            reflect.TypeOf((*q.URIReadCloser)(nil)).Elem(),
			"URIWriteCloser":           reflect.TypeOf((*q.URIWriteCloser)(nil)).Elem(),
			"Validatable":              reflect.TypeOf((*q.Validatable)(nil)).Elem(),
			"Vector2":                  reflect.TypeOf((*q.Vector2)(nil)).Elem(),
			"Widget":                   reflect.TypeOf((*q.Widget)(nil)).Elem(),
			"WidgetRenderer":           reflect.TypeOf((*q.WidgetRenderer)(nil)).Elem(),
			"Window":                   reflect.TypeOf((*q.Window)(nil)).Elem(),
		},
		NamedTypes: map[string]reflect.Type{
			"Animation":         reflect.TypeOf((*q.Animation)(nil)).Elem(),
			"AnimationCurve":    reflect.TypeOf((*q.AnimationCurve)(nil)).Elem(),
			"AppMetadata":       reflect.TypeOf((*q.AppMetadata)(nil)).Elem(),
			"BuildType":         reflect.TypeOf((*q.BuildType)(nil)).Elem(),
			"Container":         reflect.TypeOf((*q.Container)(nil)).Elem(),
			"Delta":             reflect.TypeOf((*q.Delta)(nil)).Elem(),
			"DeviceOrientation": reflect.TypeOf((*q.DeviceOrientation)(nil)).Elem(),
			"DragEvent":         reflect.TypeOf((*q.DragEvent)(nil)).Elem(),
			"HardwareKey":       reflect.TypeOf((*q.HardwareKey)(nil)).Elem(),
			"KeyEvent":          reflect.TypeOf((*q.KeyEvent)(nil)).Elem(),
			"KeyModifier":       reflect.TypeOf((*q.KeyModifier)(nil)).Elem(),
			"KeyName":           reflect.TypeOf((*q.KeyName)(nil)).Elem(),
			"MainMenu":          reflect.TypeOf((*q.MainMenu)(nil)).Elem(),
			"Menu":              reflect.TypeOf((*q.Menu)(nil)).Elem(),
			"MenuItem":          reflect.TypeOf((*q.MenuItem)(nil)).Elem(),
			"Notification":      reflect.TypeOf((*q.Notification)(nil)).Elem(),
			"PointEvent":        reflect.TypeOf((*q.PointEvent)(nil)).Elem(),
			"Position":          reflect.TypeOf((*q.Position)(nil)).Elem(),
			"ScrollEvent":       reflect.TypeOf((*q.ScrollEvent)(nil)).Elem(),
			"ShortcutCopy":      reflect.TypeOf((*q.ShortcutCopy)(nil)).Elem(),
			"ShortcutCut":       reflect.TypeOf((*q.ShortcutCut)(nil)).Elem(),
			"ShortcutHandler":   reflect.TypeOf((*q.ShortcutHandler)(nil)).Elem(),
			"ShortcutPaste":     reflect.TypeOf((*q.ShortcutPaste)(nil)).Elem(),
			"ShortcutSelectAll": reflect.TypeOf((*q.ShortcutSelectAll)(nil)).Elem(),
			"Size":              reflect.TypeOf((*q.Size)(nil)).Elem(),
			"StaticResource":    reflect.TypeOf((*q.StaticResource)(nil)).Elem(),
			"StringValidator":   reflect.TypeOf((*q.StringValidator)(nil)).Elem(),
			"TextAlign":         reflect.TypeOf((*q.TextAlign)(nil)).Elem(),
			"TextStyle":         reflect.TypeOf((*q.TextStyle)(nil)).Elem(),
			"TextWrap":          reflect.TypeOf((*q.TextWrap)(nil)).Elem(),
			"ThemeColorName":    reflect.TypeOf((*q.ThemeColorName)(nil)).Elem(),
			"ThemeIconName":     reflect.TypeOf((*q.ThemeIconName)(nil)).Elem(),
			"ThemeSizeName":     reflect.TypeOf((*q.ThemeSizeName)(nil)).Elem(),
			"ThemeVariant":      reflect.TypeOf((*q.ThemeVariant)(nil)).Elem(),
		},
		AliasTypes: map[string]reflect.Type{},
		Vars: map[string]reflect.Value{
			"AnimationEaseIn":    reflect.ValueOf(&q.AnimationEaseIn),
			"AnimationEaseInOut": reflect.ValueOf(&q.AnimationEaseInOut),
			"AnimationEaseOut":   reflect.ValueOf(&q.AnimationEaseOut),
			"AnimationLinear":    reflect.ValueOf(&q.AnimationLinear),
		},
		Funcs: map[string]reflect.Value{
			"CurrentApp":                reflect.ValueOf(q.CurrentApp),
			"CurrentDevice":             reflect.ValueOf(q.CurrentDevice),
			"IsHorizontal":              reflect.ValueOf(q.IsHorizontal),
			"IsVertical":                reflect.ValueOf(q.IsVertical),
			"LoadResourceFromPath":      reflect.ValueOf(q.LoadResourceFromPath),
			"LoadResourceFromURLString": reflect.ValueOf(q.LoadResourceFromURLString),
			"LogError":                  reflect.ValueOf(q.LogError),
			"Max":                       reflect.ValueOf(q.Max),
			"MeasureText":               reflect.ValueOf(q.MeasureText),
			"Min":                       reflect.ValueOf(q.Min),
			"NewAnimation":              reflect.ValueOf(q.NewAnimation),
			"NewContainer":              reflect.ValueOf(q.NewContainer),
			"NewContainerWithLayout":    reflect.ValueOf(q.NewContainerWithLayout),
			"NewContainerWithoutLayout": reflect.ValueOf(q.NewContainerWithoutLayout),
			"NewDelta":                  reflect.ValueOf(q.NewDelta),
			"NewMainMenu":               reflect.ValueOf(q.NewMainMenu),
			"NewMenu":                   reflect.ValueOf(q.NewMenu),
			"NewMenuItem":               reflect.ValueOf(q.NewMenuItem),
			"NewMenuItemSeparator":      reflect.ValueOf(q.NewMenuItemSeparator),
			"NewNotification":           reflect.ValueOf(q.NewNotification),
			"NewPos":                    reflect.ValueOf(q.NewPos),
			"NewSize":                   reflect.ValueOf(q.NewSize),
			"NewStaticResource":         reflect.ValueOf(q.NewStaticResource),
			"SetCurrentApp":             reflect.ValueOf(q.SetCurrentApp),
		},
		TypedConsts: map[string]igop.TypedConst{
			"BuildDebug":                    {reflect.TypeOf(q.BuildDebug), constant.MakeInt64(int64(q.BuildDebug))},
			"BuildRelease":                  {reflect.TypeOf(q.BuildRelease), constant.MakeInt64(int64(q.BuildRelease))},
			"BuildStandard":                 {reflect.TypeOf(q.BuildStandard), constant.MakeInt64(int64(q.BuildStandard))},
			"Key0":                          {reflect.TypeOf(q.Key0), constant.MakeString(string(q.Key0))},
			"Key1":                          {reflect.TypeOf(q.Key1), constant.MakeString(string(q.Key1))},
			"Key2":                          {reflect.TypeOf(q.Key2), constant.MakeString(string(q.Key2))},
			"Key3":                          {reflect.TypeOf(q.Key3), constant.MakeString(string(q.Key3))},
			"Key4":                          {reflect.TypeOf(q.Key4), constant.MakeString(string(q.Key4))},
			"Key5":                          {reflect.TypeOf(q.Key5), constant.MakeString(string(q.Key5))},
			"Key6":                          {reflect.TypeOf(q.Key6), constant.MakeString(string(q.Key6))},
			"Key7":                          {reflect.TypeOf(q.Key7), constant.MakeString(string(q.Key7))},
			"Key8":                          {reflect.TypeOf(q.Key8), constant.MakeString(string(q.Key8))},
			"Key9":                          {reflect.TypeOf(q.Key9), constant.MakeString(string(q.Key9))},
			"KeyA":                          {reflect.TypeOf(q.KeyA), constant.MakeString(string(q.KeyA))},
			"KeyApostrophe":                 {reflect.TypeOf(q.KeyApostrophe), constant.MakeString(string(q.KeyApostrophe))},
			"KeyAsterisk":                   {reflect.TypeOf(q.KeyAsterisk), constant.MakeString(string(q.KeyAsterisk))},
			"KeyB":                          {reflect.TypeOf(q.KeyB), constant.MakeString(string(q.KeyB))},
			"KeyBackTick":                   {reflect.TypeOf(q.KeyBackTick), constant.MakeString(string(q.KeyBackTick))},
			"KeyBackslash":                  {reflect.TypeOf(q.KeyBackslash), constant.MakeString(string(q.KeyBackslash))},
			"KeyBackspace":                  {reflect.TypeOf(q.KeyBackspace), constant.MakeString(string(q.KeyBackspace))},
			"KeyC":                          {reflect.TypeOf(q.KeyC), constant.MakeString(string(q.KeyC))},
			"KeyComma":                      {reflect.TypeOf(q.KeyComma), constant.MakeString(string(q.KeyComma))},
			"KeyD":                          {reflect.TypeOf(q.KeyD), constant.MakeString(string(q.KeyD))},
			"KeyDelete":                     {reflect.TypeOf(q.KeyDelete), constant.MakeString(string(q.KeyDelete))},
			"KeyDown":                       {reflect.TypeOf(q.KeyDown), constant.MakeString(string(q.KeyDown))},
			"KeyE":                          {reflect.TypeOf(q.KeyE), constant.MakeString(string(q.KeyE))},
			"KeyEnd":                        {reflect.TypeOf(q.KeyEnd), constant.MakeString(string(q.KeyEnd))},
			"KeyEnter":                      {reflect.TypeOf(q.KeyEnter), constant.MakeString(string(q.KeyEnter))},
			"KeyEqual":                      {reflect.TypeOf(q.KeyEqual), constant.MakeString(string(q.KeyEqual))},
			"KeyEscape":                     {reflect.TypeOf(q.KeyEscape), constant.MakeString(string(q.KeyEscape))},
			"KeyF":                          {reflect.TypeOf(q.KeyF), constant.MakeString(string(q.KeyF))},
			"KeyF1":                         {reflect.TypeOf(q.KeyF1), constant.MakeString(string(q.KeyF1))},
			"KeyF10":                        {reflect.TypeOf(q.KeyF10), constant.MakeString(string(q.KeyF10))},
			"KeyF11":                        {reflect.TypeOf(q.KeyF11), constant.MakeString(string(q.KeyF11))},
			"KeyF12":                        {reflect.TypeOf(q.KeyF12), constant.MakeString(string(q.KeyF12))},
			"KeyF2":                         {reflect.TypeOf(q.KeyF2), constant.MakeString(string(q.KeyF2))},
			"KeyF3":                         {reflect.TypeOf(q.KeyF3), constant.MakeString(string(q.KeyF3))},
			"KeyF4":                         {reflect.TypeOf(q.KeyF4), constant.MakeString(string(q.KeyF4))},
			"KeyF5":                         {reflect.TypeOf(q.KeyF5), constant.MakeString(string(q.KeyF5))},
			"KeyF6":                         {reflect.TypeOf(q.KeyF6), constant.MakeString(string(q.KeyF6))},
			"KeyF7":                         {reflect.TypeOf(q.KeyF7), constant.MakeString(string(q.KeyF7))},
			"KeyF8":                         {reflect.TypeOf(q.KeyF8), constant.MakeString(string(q.KeyF8))},
			"KeyF9":                         {reflect.TypeOf(q.KeyF9), constant.MakeString(string(q.KeyF9))},
			"KeyG":                          {reflect.TypeOf(q.KeyG), constant.MakeString(string(q.KeyG))},
			"KeyH":                          {reflect.TypeOf(q.KeyH), constant.MakeString(string(q.KeyH))},
			"KeyHome":                       {reflect.TypeOf(q.KeyHome), constant.MakeString(string(q.KeyHome))},
			"KeyI":                          {reflect.TypeOf(q.KeyI), constant.MakeString(string(q.KeyI))},
			"KeyInsert":                     {reflect.TypeOf(q.KeyInsert), constant.MakeString(string(q.KeyInsert))},
			"KeyJ":                          {reflect.TypeOf(q.KeyJ), constant.MakeString(string(q.KeyJ))},
			"KeyK":                          {reflect.TypeOf(q.KeyK), constant.MakeString(string(q.KeyK))},
			"KeyL":                          {reflect.TypeOf(q.KeyL), constant.MakeString(string(q.KeyL))},
			"KeyLeft":                       {reflect.TypeOf(q.KeyLeft), constant.MakeString(string(q.KeyLeft))},
			"KeyLeftBracket":                {reflect.TypeOf(q.KeyLeftBracket), constant.MakeString(string(q.KeyLeftBracket))},
			"KeyM":                          {reflect.TypeOf(q.KeyM), constant.MakeString(string(q.KeyM))},
			"KeyMinus":                      {reflect.TypeOf(q.KeyMinus), constant.MakeString(string(q.KeyMinus))},
			"KeyModifierAlt":                {reflect.TypeOf(q.KeyModifierAlt), constant.MakeInt64(int64(q.KeyModifierAlt))},
			"KeyModifierControl":            {reflect.TypeOf(q.KeyModifierControl), constant.MakeInt64(int64(q.KeyModifierControl))},
			"KeyModifierShift":              {reflect.TypeOf(q.KeyModifierShift), constant.MakeInt64(int64(q.KeyModifierShift))},
			"KeyModifierShortcutDefault":    {reflect.TypeOf(q.KeyModifierShortcutDefault), constant.MakeInt64(int64(q.KeyModifierShortcutDefault))},
			"KeyModifierSuper":              {reflect.TypeOf(q.KeyModifierSuper), constant.MakeInt64(int64(q.KeyModifierSuper))},
			"KeyN":                          {reflect.TypeOf(q.KeyN), constant.MakeString(string(q.KeyN))},
			"KeyO":                          {reflect.TypeOf(q.KeyO), constant.MakeString(string(q.KeyO))},
			"KeyP":                          {reflect.TypeOf(q.KeyP), constant.MakeString(string(q.KeyP))},
			"KeyPageDown":                   {reflect.TypeOf(q.KeyPageDown), constant.MakeString(string(q.KeyPageDown))},
			"KeyPageUp":                     {reflect.TypeOf(q.KeyPageUp), constant.MakeString(string(q.KeyPageUp))},
			"KeyPeriod":                     {reflect.TypeOf(q.KeyPeriod), constant.MakeString(string(q.KeyPeriod))},
			"KeyPlus":                       {reflect.TypeOf(q.KeyPlus), constant.MakeString(string(q.KeyPlus))},
			"KeyQ":                          {reflect.TypeOf(q.KeyQ), constant.MakeString(string(q.KeyQ))},
			"KeyR":                          {reflect.TypeOf(q.KeyR), constant.MakeString(string(q.KeyR))},
			"KeyReturn":                     {reflect.TypeOf(q.KeyReturn), constant.MakeString(string(q.KeyReturn))},
			"KeyRight":                      {reflect.TypeOf(q.KeyRight), constant.MakeString(string(q.KeyRight))},
			"KeyRightBracket":               {reflect.TypeOf(q.KeyRightBracket), constant.MakeString(string(q.KeyRightBracket))},
			"KeyS":                          {reflect.TypeOf(q.KeyS), constant.MakeString(string(q.KeyS))},
			"KeySemicolon":                  {reflect.TypeOf(q.KeySemicolon), constant.MakeString(string(q.KeySemicolon))},
			"KeySlash":                      {reflect.TypeOf(q.KeySlash), constant.MakeString(string(q.KeySlash))},
			"KeySpace":                      {reflect.TypeOf(q.KeySpace), constant.MakeString(string(q.KeySpace))},
			"KeyT":                          {reflect.TypeOf(q.KeyT), constant.MakeString(string(q.KeyT))},
			"KeyTab":                        {reflect.TypeOf(q.KeyTab), constant.MakeString(string(q.KeyTab))},
			"KeyU":                          {reflect.TypeOf(q.KeyU), constant.MakeString(string(q.KeyU))},
			"KeyUnknown":                    {reflect.TypeOf(q.KeyUnknown), constant.MakeString(string(q.KeyUnknown))},
			"KeyUp":                         {reflect.TypeOf(q.KeyUp), constant.MakeString(string(q.KeyUp))},
			"KeyV":                          {reflect.TypeOf(q.KeyV), constant.MakeString(string(q.KeyV))},
			"KeyW":                          {reflect.TypeOf(q.KeyW), constant.MakeString(string(q.KeyW))},
			"KeyX":                          {reflect.TypeOf(q.KeyX), constant.MakeString(string(q.KeyX))},
			"KeyY":                          {reflect.TypeOf(q.KeyY), constant.MakeString(string(q.KeyY))},
			"KeyZ":                          {reflect.TypeOf(q.KeyZ), constant.MakeString(string(q.KeyZ))},
			"OrientationHorizontalLeft":     {reflect.TypeOf(q.OrientationHorizontalLeft), constant.MakeInt64(int64(q.OrientationHorizontalLeft))},
			"OrientationHorizontalRight":    {reflect.TypeOf(q.OrientationHorizontalRight), constant.MakeInt64(int64(q.OrientationHorizontalRight))},
			"OrientationVertical":           {reflect.TypeOf(q.OrientationVertical), constant.MakeInt64(int64(q.OrientationVertical))},
			"OrientationVerticalUpsideDown": {reflect.TypeOf(q.OrientationVerticalUpsideDown), constant.MakeInt64(int64(q.OrientationVerticalUpsideDown))},
			"TextAlignCenter":               {reflect.TypeOf(q.TextAlignCenter), constant.MakeInt64(int64(q.TextAlignCenter))},
			"TextAlignLeading":              {reflect.TypeOf(q.TextAlignLeading), constant.MakeInt64(int64(q.TextAlignLeading))},
			"TextAlignTrailing":             {reflect.TypeOf(q.TextAlignTrailing), constant.MakeInt64(int64(q.TextAlignTrailing))},
			"TextTruncate":                  {reflect.TypeOf(q.TextTruncate), constant.MakeInt64(int64(q.TextTruncate))},
			"TextWrapBreak":                 {reflect.TypeOf(q.TextWrapBreak), constant.MakeInt64(int64(q.TextWrapBreak))},
			"TextWrapOff":                   {reflect.TypeOf(q.TextWrapOff), constant.MakeInt64(int64(q.TextWrapOff))},
			"TextWrapWord":                  {reflect.TypeOf(q.TextWrapWord), constant.MakeInt64(int64(q.TextWrapWord))},
		},
		UntypedConsts: map[string]igop.UntypedConst{
			"AnimationRepeatForever": {"untyped int", constant.MakeInt64(int64(q.AnimationRepeatForever))},
		},
	})
}
